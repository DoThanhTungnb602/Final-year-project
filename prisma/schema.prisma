generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

enum Role {
    USER
    ADMIN
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum Verdict {
    ACCEPTED
    WRONG_ANSWER
    TIME_LIMIT_EXCEEDED
    MEMORY_LIMIT_EXCEEDED
    RUNTIME_ERROR
    COMPILATION_ERROR
}

enum Topic {
    ARRAY
    STRING
    HASH_TABLE
    DYNAMIC_PROGRAMMING
    MATH
    SORTING
    GREEDY
    DEPTH_FIRST_SEARCH
    DATABASE
    BINARY_SEARCH
    TREE
    BREADTH_FIRST_SEARCH
    MATRIX
    BIT_MANIPULATION
    TWO_POINTERS
    BINARY_TREE
    HEAP
    PREFIX_SUM
    STACK
    SIMULATION
    GRAPH
    COUNTING
    DESIGN
    SLIDING_WINDOW
    BACKTRACKING
    ENUMERATION
    UNION_FIND
    LINKED_LIST
    ORDERED_SET
    MONOTONIC_STACK
    NUMBER_THEORY
    TRIE
    DIVIDE_AND_CONQUER
    BITMASK
    RECURSION
    SEGMENT_TREE
    QUEUE
    BINARY_SEARCH_TREE
    MEMOIZATION
    GEOMETRY
    BINARY_INDEXED_TREE
    HASH_FUNCTION
    COMBINATORICS
    TOPOLOGICAL_SORT
    STRING_MATCHING
    SHORTEST_PATH
    ROLLING_HASH
    GAME_THEORY
    INTERACTIVE
    DATA_STREAM
    BRAINTEASER
    MONOTONIC_QUEUE
    RANDOMIZED
    MERGE_SORT
    ITERATOR
    CONCURRENCY
    DOUBLY_LINKED_LIST
    PROBABILITY_AND_STATISTICS
    QUICKSELECT
    BUCKET_SORT
    SUFFIX_ARRAY
    MINIMUM_SPANNING_TREE
    COUNTING_SORT
    SHELL
    LINE_SWEEP
    RESERVOIR_SAMPLING
    STRONGLY_CONNECTED_COMPONENT
    EULERIAN_CIRCUIT
    RADIX_SORT
    REJECTION_SAMPLING
    BICONNECTED_COMPONENT
}

model User {
    id              String       @id @default(cuid())
    name            String?
    email           String       @unique
    emailVerified   DateTime?
    password        String?
    role            Role         @default(USER)
    image           String?
    accounts        Account[]
    sessions        Session[]
    submissions     Submission[]
    enrolledClasses Class[]      @relation("EnrolledClasses")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Problem {
    id          String       @id @default(cuid())
    title       String
    difficulty  Difficulty
    tags        Topic[]
    description String?
    timeLimit   Int?
    memoryLimit Int?
    testcases   String?
    solution    String?
    submissions Submission[]
    exercise    Exercise?    @relation(fields: [exerciseId], references: [id])
    exerciseId  String?
    test        Test?        @relation(fields: [testId], references: [id])
    testId      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Class {
    id        String     @id @default(cuid())
    name      String
    students  User[]     @relation("EnrolledClasses")
    exercises Exercise[]
    tests     Test[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Exercise {
    id           String       @id @default(cuid())
    title        String
    assignedDate DateTime
    dueDate      DateTime
    problems     Problem[]
    submissions  Submission[]
    Class        Class?       @relation(fields: [classId], references: [id])
    classId      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Test {
    id          String       @id @default(cuid())
    title       String
    startTime   DateTime
    endTime     DateTime
    problems    Problem[]
    submissions Submission[]
    Class       Class?       @relation(fields: [classId], references: [id])
    classId     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Language {
    id         Int          @id
    name       String
    Submission Submission[]

    @@unique([name])
}

model Submission {
    id         String    @id @default(cuid())
    verdict    Verdict
    time       Int
    memory     Int
    code       String
    languageId Int
    language   Language  @relation(fields: [languageId], references: [id])
    problemId  String
    problem    Problem   @relation(fields: [problemId], references: [id])
    userId     String
    user       User      @relation(fields: [userId], references: [id])
    exercise   Exercise? @relation(fields: [exerciseId], references: [id])
    exerciseId String?
    test       Test?     @relation(fields: [testId], references: [id])
    testId     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
