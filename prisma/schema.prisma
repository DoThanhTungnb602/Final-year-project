// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

enum Role {
    USER
    ADMIN
}

enum Language {
    C
    CPP
    JAVA
    PYTHON
    JAVASCRIPT
}

// Necessary for Next auth
model User {
    id                String       @id @default(cuid())
    name              String?
    email             String       @unique
    emailVerified     DateTime?
    password          String?
    role              Role         @default(USER)
    image             String?
    accounts          Account[]
    sessions          Session[]
    enrolledClasses   Class[]      @relation("EnrolledClasses")
    instructedClasses Class[]      @relation("InstructedClasses")
    submissions       Submission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model Class {
    id          String    @id @default(cuid())
    name        String
    description String?
    image       String?
    teacher     User      @relation(name: "InstructedClasses", fields: [teacherId], references: [id])
    teacherId   String
    students    User[]    @relation("EnrolledClasses")
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Problem     Problem[]
}

model Problem {
    id          String       @id @default(cuid())
    name        String
    description String?
    timeLimit   Int
    memoryLimit Int
    image       String?
    class       Class        @relation(fields: [classId], references: [id])
    classId     String
    testcases   TestCase[]
    solution    Solution[]
    submissions Submission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TestCase {
    id        String   @id @default(cuid())
    fileUrl   String
    language  Language
    problem   Problem  @relation(fields: [problemId], references: [id])
    problemId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Solution {
    id        String   @id @default(cuid())
    code      String
    language  Language
    problem   Problem  @relation(fields: [problemId], references: [id])
    problemId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Submission {
    id        String   @id @default(cuid())
    verdict   String
    time      Int
    memory    Int
    code      String
    language  Language
    problem   Problem  @relation(fields: [problemId], references: [id])
    problemId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
